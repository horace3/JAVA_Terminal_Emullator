/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import com.fazecast.jSerialComm.*;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.io.*;

public class jTerminal extends javax.swing.JFrame {
    private SerialPort comPorts[];
    private int port=-1;
    private boolean echoON=true;
    public SerialPort comPort;
    
    // list COM ports and add to the ComPortMenu items in the menu bar
    public jTerminal() {
        initComponents();
                // get information on COM ports and display in TextArea
        String s = "List COM ports";
        comPorts = SerialPort.getCommPorts();
        if(comPorts.length<1)           // if no COM ports found exit
            {System.out.println("no COM ports found"); return;}
        // print list of COM ports, add to COMportMenu and attach event handler
        for (int i = 0; i < comPorts.length; i++)   { 
           System.out.println(s+=("\ncomPort[" + i + "] = " + comPorts[i].getDescriptivePortName()));
           JMenuItem comPort= new JMenuItem(comPorts[i].getDescriptivePortName());
             comPort.addActionListener(new java.awt.event.ActionListener() {
             @Override
             public void actionPerformed(java.awt.event.ActionEvent evt)  {
                 JMenuItem mItem = (JMenuItem) evt.getSource();
                 for (int i = 0; i < comPorts.length; i++)  
                    if(comPorts[i].getDescriptivePortName().equals(mItem.getText()))
                        { port=i; openCOMport(); break; }
                //System.out.println("event " + mItem.getText() + " " + offset);
                }
              });        
          COMportMenu.add(comPort);  // add to COMportMenu
          }
       TerminalTextArea.setText(s+"\n"); // display list of COM ports
       if(comPorts.length==1)            // if 1 COM port found open it
            {port=0; openCOMport();}
       else
           TerminalTextArea.append("\nUse COM port menu to select serial port\n");
    }
    
    // attempt to open COM port - if OK add data listener
    void openCOMport() {
        comPort = SerialPort.getCommPorts()[port];
        TerminalTextArea.append("attempting to open " +  comPorts[port].getDescriptivePortName() + "\n");
        if(!comPort.openPort()) 
           { TerminalTextArea.append("failed to open COM port " + comPorts[port].getDescriptivePortName() + "\n"); port=-1; return; }
        TerminalTextArea.append("Opened COM port " + comPorts[port].getDescriptivePortName() + " OK\n");
        comPort.setBaudRate(115200);
        comPort.addDataListener(new SerialPortDataListener() {
          @Override
          public int getListeningEvents() { return SerialPort.LISTENING_EVENT_DATA_AVAILABLE; }
          @Override
          // character received by serial port - read and dispay in TextArea
          public void serialEvent(SerialPortEvent event)
            {
            if (event.getEventType() != SerialPort.LISTENING_EVENT_DATA_AVAILABLE)  return;
            byte[] newData = new byte[comPort.bytesAvailable()];
            int numRead = comPort.readBytes(newData, newData.length);
            // append text to textarea and move to end (required for Linux?)
            TerminalTextArea.append(new String(newData));
            int l=TerminalTextArea.getText().length();
            TerminalTextArea.setSelectionStart(l);
            TerminalTextArea.setSelectionEnd(l);
           }
        });
        }      


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TerminalTextArea = new java.awt.TextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        COMportMenu = new javax.swing.JMenu();
        BaudRateMenu = new javax.swing.JMenu();
        BaudRateMenuItem1 = new javax.swing.JMenuItem();
        BaudRateMenuItem2 = new javax.swing.JMenuItem();
        BaudRateMenuItem3 = new javax.swing.JMenuItem();
        BaudRateMenuItem4 = new javax.swing.JMenuItem();
        BaudRateMenuItem5 = new javax.swing.JMenuItem();
        BaudRateMenuItem6 = new javax.swing.JMenuItem();
        BaudRateMenuItem7 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        EchoMenuItem = new javax.swing.JMenuItem();
        OptionsMenu = new javax.swing.JMenu();
        TransmitTimeMenu = new javax.swing.JMenuItem();
        ExecuteCommandMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("jSwingTerminal");

        TerminalTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TerminalTextAreaKeyTyped(evt);
            }
        });

        jMenu1.setText("Exit");
        jMenu1.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                exitMenuSelected(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        COMportMenu.setText("COM ports");
        jMenuBar1.add(COMportMenu);

        BaudRateMenu.setText("Baud Rate");

        BaudRateMenuItem1.setLabel("2400");
        BaudRateMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BaudRateMenuItemActionPerformed(evt);
            }
        });
        BaudRateMenu.add(BaudRateMenuItem1);

        BaudRateMenuItem2.setLabel("4800");
        BaudRateMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BaudRateMenuItemActionPerformed(evt);
            }
        });
        BaudRateMenu.add(BaudRateMenuItem2);

        BaudRateMenuItem3.setLabel("9600");
        BaudRateMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BaudRateMenuItemActionPerformed(evt);
            }
        });
        BaudRateMenu.add(BaudRateMenuItem3);

        BaudRateMenuItem4.setLabel("19200");
        BaudRateMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BaudRateMenuItemActionPerformed(evt);
            }
        });
        BaudRateMenu.add(BaudRateMenuItem4);

        BaudRateMenuItem5.setLabel("38400");
        BaudRateMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BaudRateMenuItemActionPerformed(evt);
            }
        });
        BaudRateMenu.add(BaudRateMenuItem5);

        BaudRateMenuItem6.setLabel("57600");
        BaudRateMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BaudRateMenuItemActionPerformed(evt);
            }
        });
        BaudRateMenu.add(BaudRateMenuItem6);

        BaudRateMenuItem7.setLabel("115200");
        BaudRateMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BaudRateMenuItemActionPerformed(evt);
            }
        });
        BaudRateMenu.add(BaudRateMenuItem7);

        jMenuBar1.add(BaudRateMenu);

        jMenu4.setText("Settings");

        EchoMenuItem.setText("Echo ON");
        EchoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EchoMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(EchoMenuItem);

        jMenuBar1.add(jMenu4);

        OptionsMenu.setText("Options");

        TransmitTimeMenu.setText("Transmit date & time");
        TransmitTimeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransmitTimeMenuActionPerformed(evt);
            }
        });
        OptionsMenu.add(TransmitTimeMenu);

        ExecuteCommandMenuItem.setText("Execute command");
        ExecuteCommandMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecuteCommandMenuItemActionPerformed(evt);
            }
        });
        OptionsMenu.add(ExecuteCommandMenuItem);

        jMenuBar1.add(OptionsMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(TerminalTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 1035, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(TerminalTextArea, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // key hit in terminal TextArea - transmit to serial port if open
    private void TerminalTextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TerminalTextAreaKeyTyped
        if(comPort != null && comPort.isOpen())
            comPort.writeBytes( new byte[]{(byte) evt.getKeyChar()},  1);
        else
            TerminalTextArea.append(" no COM port open!\n");
        if(EchoMenuItem.getText().equals("Echo ON"))
            evt.consume();
        int l=TerminalTextArea.getText().length();
        TerminalTextArea.setSelectionStart(l);
        TerminalTextArea.setSelectionEnd(l);
 
    }//GEN-LAST:event_TerminalTextAreaKeyTyped

    // exit selected - close program
    private void exitMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_exitMenuSelected
        if(comPort != null && comPort.isOpen())
            comPort.closePort();
        System.exit(0);
    }//GEN-LAST:event_exitMenuSelected

    // item in baud rate menu selected - set up baurd rate
    private void BaudRateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BaudRateMenuItemActionPerformed
        JMenuItem mItem = (JMenuItem) evt.getSource();
         if(comPort != null && comPort.isOpen()) {
            TerminalTextArea.append("\nBaud rate set to " + mItem.getText() + "\n");
            comPort.setBaudRate(Integer.parseInt(mItem.getText()));
         }
    }//GEN-LAST:event_BaudRateMenuItemActionPerformed

    // echo menu item selected - invert echo setting
    private void EchoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EchoMenuItemActionPerformed
        JMenuItem mItem = (JMenuItem) evt.getSource();
        if(mItem.getText().equals("Echo OFF"))
            mItem.setText("Echo ON");
        else
            mItem.setText("Echo OFF");
    }//GEN-LAST:event_EchoMenuItemActionPerformed

    private void TransmitTimeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransmitTimeMenuActionPerformed
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        System.out.println( sdf.format(cal.getTime()) );
        byte[] array = sdf.format(cal.getTime()).getBytes();
        if(comPort != null && comPort.isOpen())
            comPort.writeBytes( array, array.length);
    }//GEN-LAST:event_TransmitTimeMenuActionPerformed

    // display a dialog to accept a shell command, execute it
    private void ExecuteCommandMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecuteCommandMenuItemActionPerformed
    try {
        String s = (String)JOptionPane.showInputDialog(
                    this,
                    "enter command to execute, e.g. windows\n "
                    + "  cmd /c time /T",
                    "Execute shell command",
                    JOptionPane.PLAIN_MESSAGE,
                    null, null, null);
       if ((s != null) && (s.length() > 0)) {
          TerminalTextArea.append("\nexecuting '" + s + "'\n");
          Process proc = Runtime.getRuntime().exec(s);
          BufferedReader stdInput = new BufferedReader(new 
            InputStreamReader(proc.getInputStream()));  
          s = null;
          while ((s = stdInput.readLine()) != null)   {
            byte[] array = s.getBytes();
            if(comPort != null && comPort.isOpen())
               comPort.writeBytes( array, array.length);
            TerminalTextArea.append("\ntransmitting '" + s + "'\n");
          }
         }
       }
    catch (Exception e) {TerminalTextArea.append(e.toString());}
    }//GEN-LAST:event_ExecuteCommandMenuItemActionPerformed

    // @param args the command line arguments
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jTerminal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jTerminal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jTerminal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jTerminal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jTerminal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu BaudRateMenu;
    private javax.swing.JMenuItem BaudRateMenuItem1;
    private javax.swing.JMenuItem BaudRateMenuItem2;
    private javax.swing.JMenuItem BaudRateMenuItem3;
    private javax.swing.JMenuItem BaudRateMenuItem4;
    private javax.swing.JMenuItem BaudRateMenuItem5;
    private javax.swing.JMenuItem BaudRateMenuItem6;
    private javax.swing.JMenuItem BaudRateMenuItem7;
    private javax.swing.JMenu COMportMenu;
    private javax.swing.JMenuItem EchoMenuItem;
    private javax.swing.JMenuItem ExecuteCommandMenuItem;
    private javax.swing.JMenu OptionsMenu;
    private java.awt.TextArea TerminalTextArea;
    private javax.swing.JMenuItem TransmitTimeMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
